{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/arjun/Dal_Projects/react-project/duck-feeds/src/components/DashBoard/FeedTables.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nconst columns = [{\n  id: 'NickName',\n  label: 'Nick Name',\n  minWidth: 170\n}, {\n  id: 'time',\n  label: 'Time',\n  minWidth: 100\n}, {\n  id: 'Time Environment',\n  label: 'Environment',\n  minWidth: 100,\n  align: 'right' // format: (value) => value.toLocaleString('en-US'),\n\n}, {\n  id: 'place',\n  label: 'Place',\n  minWidth: 1700,\n  align: 'right' // format: (value) => value.toLocaleString('en-US'),\n\n}, {\n  id: 'country',\n  label: 'Country',\n  minWidth: 100,\n  align: 'right' // format: (value) => value.toFixed(2),\n\n}, {\n  id: 'food',\n  label: 'Food',\n  minWidth: 100,\n  align: 'right' // format: (value) => value.toFixed(2),\n\n}, {\n  id: 'foodType',\n  label: 'FoodType',\n  minWidth: 100,\n  align: 'right' // format: (value) => value.toFixed(2),\n\n}, {\n  id: 'duckFeed',\n  label: 'Duck Feed',\n  minWidth: 100,\n  align: 'right' // format: (value) => value.toFixed(2),\n\n}, {\n  id: 'feedAmount',\n  label: 'Feed Amount',\n  minWidth: 100,\n  align: 'right' // format: (value) => value.toFixed(2),\n\n}];\n\nfunction createData(name, code, population, size) {\n  const density = population / size;\n  return {\n    name,\n    code,\n    population,\n    size,\n    density\n  };\n}\n\nconst rows = [createData('India', 'IN', 1324171354, 3287263), createData('China', 'CN', 1403500365, 9596961), createData('Italy', 'IT', 60483973, 301340), createData('United States', 'US', 327167434, 9833520), createData('Canada', 'CA', 37602103, 9984670), createData('Australia', 'AU', 25475400, 7692024), createData('Germany', 'DE', 83019200, 357578), createData('Ireland', 'IE', 4857000, 70273), createData('Mexico', 'MX', 126577691, 1972550), createData('Japan', 'JP', 126317000, 377973), createData('France', 'FR', 67022000, 640679), createData('United Kingdom', 'GB', 67545757, 242495), createData('Russia', 'RU', 146793744, 17098246), createData('Nigeria', 'NG', 200962417, 923768), createData('Brazil', 'BR', 210147125, 8515767)];\n\nconst styles = theme => ({\n  root: {\n    backgroundColor: theme.palette.secondary.dark\n  },\n  tablePagination: {},\n  tablePaginationCaption: {\n    color: 'white'\n  },\n  tablePaginationSelectIcon: {\n    color: 'white'\n  },\n  tablePaginationSelect: {\n    color: 'white'\n  },\n  tablePaginationActions: {\n    color: 'white'\n  }\n});\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n    alignItems: 'center',\n    alignSelf: 'center',\n    background: \"#f4f4f4\"\n  },\n  tablePaginationSelectIcon: {\n    color: 'white'\n  },\n  container: {\n    maxHeight: 440\n  }\n});\nexport default function StickyHeadTable() {\n  _s();\n\n  const classes = useStyles();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  const [rows, setRows] = React.useState([]);\n  useEffect(function upFood() {\n    async function fetchFoodType() {\n      const foodTypeResponse = await fetch('http://localhost:8080/survey/foodTypes', {\n        method: 'GET',\n        mode: \"cors\",\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(response => response.json());\n\n      if (foodTypeResponse['status'] == 200) {\n        var listVal = []; // console.log(foodTypeResponse.json().hits);\n\n        var resData = foodTypeResponse['data'];\n        console.log(resData); // var listFoodType = []\n\n        resData.forEach(element => {\n          listVal.push(element.name);\n        });\n        console.log(listVal);\n        console.log(foodTypes);\n        var currentFoodTypes = [...foodTypes];\n        currentFoodTypes = currentFoodTypes.concat(listVal);\n        currentFoodTypes.push('others');\n        updateFoodTypes(currentFoodTypes);\n      }\n    }\n\n    fetchFoodType();\n  }, []);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(TableContainer, {\n      className: classes.container,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        stickyHeader: true,\n        \"aria-label\": \"sticky table\",\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: columns.map(column => /*#__PURE__*/_jsxDEV(TableCell, {\n              align: column.align,\n              style: {\n                minWidth: column.minWidth,\n                background: \"#0F293D\",\n                color: '#fff'\n              },\n              children: column.label\n            }, column.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(row => {\n            return /*#__PURE__*/_jsxDEV(TableRow, {\n              hover: true,\n              role: \"checkbox\",\n              tabIndex: -1,\n              children: columns.map(column => {\n                const value = row[column.id];\n                return /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: column.align,\n                  style: {\n                    color: '#0F293D'\n                  },\n                  children: column.format && typeof value === 'number' ? column.format(value) : value\n                }, column.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 198,\n                  columnNumber: 23\n                }, this);\n              })\n            }, row.code, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TablePagination, {\n      rowsPerPageOptions: [10, 25, 100],\n      component: \"div\",\n      style: {\n        background: '#0F293D',\n        color: '#f4f4f4'\n      },\n      count: rows.length,\n      rowsPerPage: rowsPerPage,\n      page: page,\n      onChangePage: handleChangePage,\n      onChangeRowsPerPage: handleChangeRowsPerPage,\n      classes: {\n        root: classes.tablePagination,\n        caption: classes.tablePaginationCaption,\n        selectIcon: classes.tablePaginationSelectIcon,\n        select: classes.tablePaginationSelect,\n        actions: classes.tablePaginationActions\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 5\n  }, this);\n}\n\n_s(StickyHeadTable, \"uQltjn2E6TqsJzpn7acylQlM4Bw=\", false, function () {\n  return [useStyles];\n});\n\n_c = StickyHeadTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"StickyHeadTable\");","map":{"version":3,"sources":["/home/arjun/Dal_Projects/react-project/duck-feeds/src/components/DashBoard/FeedTables.js"],"names":["React","makeStyles","Paper","Table","TableBody","TableCell","TableContainer","TableHead","TablePagination","TableRow","columns","id","label","minWidth","align","createData","name","code","population","size","density","rows","styles","theme","root","backgroundColor","palette","secondary","dark","tablePagination","tablePaginationCaption","color","tablePaginationSelectIcon","tablePaginationSelect","tablePaginationActions","useStyles","width","alignItems","alignSelf","background","container","maxHeight","StickyHeadTable","classes","page","setPage","useState","rowsPerPage","setRowsPerPage","setRows","useEffect","upFood","fetchFoodType","foodTypeResponse","fetch","method","mode","headers","then","response","json","listVal","resData","console","log","forEach","element","push","foodTypes","currentFoodTypes","concat","updateFoodTypes","handleChangePage","event","newPage","handleChangeRowsPerPage","target","value","map","column","slice","row","format","length","caption","selectIcon","select","actions"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\n\nconst columns = [\n  { id: 'NickName', label: 'Nick Name', minWidth: 170 },\n  { id: 'time', label: 'Time', minWidth: 100 },\n  {\n    id: 'Time Environment',\n    label: 'Environment',\n    minWidth: 100,\n    align: 'right',\n    // format: (value) => value.toLocaleString('en-US'),\n  },\n  {\n    id: 'place',\n    label: 'Place',\n    minWidth: 1700,\n    align: 'right',\n    // format: (value) => value.toLocaleString('en-US'),\n  },\n  {\n    id: 'country',\n    label: 'Country',\n    minWidth: 100,\n    align: 'right',\n    // format: (value) => value.toFixed(2),\n  },\n  {\n    id: 'food',\n    label: 'Food',\n    minWidth: 100,\n    align: 'right',\n    // format: (value) => value.toFixed(2),\n  },\n  {\n    id: 'foodType',\n    label: 'FoodType',\n    minWidth: 100,\n    align: 'right',\n    // format: (value) => value.toFixed(2),\n  },\n  {\n    id: 'duckFeed',\n    label: 'Duck Feed',\n    minWidth: 100,\n    align: 'right',\n    // format: (value) => value.toFixed(2),\n  },\n  {\n    id: 'feedAmount',\n    label: 'Feed Amount',\n    minWidth: 100,\n    align: 'right',\n    // format: (value) => value.toFixed(2),\n  },\n];\n\nfunction createData(name, code, population, size) {\n  const density = population / size;\n  return { name, code, population, size, density };\n}\n\nconst rows = [\n  createData('India', 'IN', 1324171354, 3287263),\n  createData('China', 'CN', 1403500365, 9596961),\n  createData('Italy', 'IT', 60483973, 301340),\n  createData('United States', 'US', 327167434, 9833520),\n  createData('Canada', 'CA', 37602103, 9984670),\n  createData('Australia', 'AU', 25475400, 7692024),\n  createData('Germany', 'DE', 83019200, 357578),\n  createData('Ireland', 'IE', 4857000, 70273),\n  createData('Mexico', 'MX', 126577691, 1972550),\n  createData('Japan', 'JP', 126317000, 377973),\n  createData('France', 'FR', 67022000, 640679),\n  createData('United Kingdom', 'GB', 67545757, 242495),\n  createData('Russia', 'RU', 146793744, 17098246),\n  createData('Nigeria', 'NG', 200962417, 923768),\n  createData('Brazil', 'BR', 210147125, 8515767),\n];\nconst styles = theme => ({\n    root: {\n        backgroundColor: theme.palette.secondary.dark,\n      },\n    tablePagination: {\n      },\n    tablePaginationCaption: {\n        color: 'white'\n      },\n    tablePaginationSelectIcon: {\n        color: 'white'\n      },\n    tablePaginationSelect: {\n        color: 'white'\n      },\n    tablePaginationActions: {\n        color: 'white',\n      },\n    })\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n    alignItems:'center',\n    alignSelf:'center',\n    \n    background:\"#f4f4f4\",\n  },\n  tablePaginationSelectIcon: {\n    color: 'white'\n  },\n  container: {\n    maxHeight: 440,\n    \n  },\n});\n\nexport default function StickyHeadTable() {\n  const classes = useStyles();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  const [rows,setRows]=React.useState([]);\n\n  useEffect( function upFood(){\n    async function fetchFoodType(){\n        const foodTypeResponse = await fetch('http://localhost:8080/survey/foodTypes', {\n        method: 'GET',\n        mode: \"cors\",\n        headers: {\n            'Content-Type': 'application/json',\n        }\n    }).then(response => response.json());\n    if (foodTypeResponse['status'] == 200) {\n\n        var listVal=[];\n        // console.log(foodTypeResponse.json().hits);\n        var resData = foodTypeResponse['data'];\n        console.log(resData);\n        // var listFoodType = []\n        resData.forEach(element => {\n            listVal.push(element.name)\n\n        });\n        console.log(listVal);\n        console.log(foodTypes);\n        var currentFoodTypes=[...foodTypes];\n        currentFoodTypes= currentFoodTypes.concat(listVal);\n        currentFoodTypes.push('others')\n        updateFoodTypes(currentFoodTypes);\n\n    }\n\n    }\n    fetchFoodType();\n\n},[]);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  return (\n    <Paper className={classes.root}>\n      <TableContainer className={classes.container}>\n        <Table stickyHeader aria-label=\"sticky table\">\n          <TableHead>\n            <TableRow>\n              {columns.map((column) => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth,background:\"#0F293D\",color:'#fff' }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\n              return (\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code} >\n                  {columns.map((column) => {\n                    const value = row[column.id];\n                    return (\n                      <TableCell key={column.id} align={column.align} style={{color:'#0F293D'}}>\n                        {column.format && typeof value === 'number' ? column.format(value) : value}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        rowsPerPageOptions={[10, 25, 100]}\n        component=\"div\"\n        style={{background:'#0F293D',color:'#f4f4f4'}}\n        count={rows.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onChangePage={handleChangePage}\n        onChangeRowsPerPage={handleChangeRowsPerPage}\n        classes={{\n            root: classes.tablePagination,\n            caption: classes.tablePaginationCaption,\n            selectIcon: classes.tablePaginationSelectIcon,\n            select: classes.tablePaginationSelect,\n            actions: classes.tablePaginationActions,\n          }}\n      />\n    </Paper>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}