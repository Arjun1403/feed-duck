{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/arjun/Dal_Projects/react-project/duck-feeds/src/components/DashBoard/BarChart.js\";\nimport React, { Component } from 'react';\nimport { Bar } from 'react-chartjs-2';\n\nclass BarChart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      bgColor: props.bgColor\n    };\n  }\n\n  async componentDidMount() {\n    const resp = await fetch('http://localhost:8080/survey/ducks?by=country').then(response => response.json());\n    var countCountry = {};\n    resp.forEach(element => {\n      var count = element.sum;\n      var country_name = element['Region']['Country'].name;\n      countCountry[country_name] = count;\n    });\n    console.log(countCountry);\n    var colors = [];\n\n    for (var key in countCountry) {\n      key;\n      var pos1 = Math.floor(Math.random() * 255) + 1;\n      var pos2 = Math.floor(Math.random() * 255) + 1;\n      colors.push('rgba(255,' + pos1 + ',' + pos2 + ', 0.6)');\n    }\n\n    this.getChartData(countCountry, colors); // console.log(resp)\n  }\n\n  getChartData(countCountry, colors) {\n    this.setState({\n      chartData: {\n        labels: Object.keys(countCountry),\n        datasets: [{\n          label: 'Duck Count',\n          data: Object.values(countCountry),\n          backgroundColor: colors\n        }]\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Bar, {\n        data: this.state.chartData,\n        width: 600,\n        height: 150,\n        options: {\n          legend: {\n            display: this.props.displayLegend,\n            position: this.props.legendPosition,\n            labels: {\n              fontColor: this.state.bgColor,\n              fontSize: 18\n            }\n          },\n          scales: {\n            yAxes: [{\n              display: true,\n              scaleLabel: {\n                display: true,\n                labelString: 'probability',\n                fontColor: this.state.bgColor\n              },\n              ticks: {\n                fontColor: this.state.bgColor,\n                fontSize: 20\n              }\n            }],\n            xAxes: [{\n              display: true,\n              ticks: {\n                fontColor: this.state.bgColor,\n                fontSize: 20,\n                stepSize: 1\n              } // gridLines: {\n              //   display: false ,\n              //   color: this.state.bgColor\n              // },\n\n            }]\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nBarChart.defaultProps = {\n  displayTitle: true,\n  displayLegend: true,\n  legendPosition: 'right'\n};\nexport default BarChart;","map":{"version":3,"sources":["/home/arjun/Dal_Projects/react-project/duck-feeds/src/components/DashBoard/BarChart.js"],"names":["React","Component","Bar","BarChart","constructor","props","state","bgColor","componentDidMount","resp","fetch","then","response","json","countCountry","forEach","element","count","sum","country_name","name","console","log","colors","key","pos1","Math","floor","random","pos2","push","getChartData","setState","chartData","labels","Object","keys","datasets","label","data","values","backgroundColor","render","legend","display","displayLegend","position","legendPosition","fontColor","fontSize","scales","yAxes","scaleLabel","labelString","ticks","xAxes","stepSize","defaultProps","displayTitle"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,GAAT,QAAmB,iBAAnB;;AAEA,MAAMC,QAAN,SAAuBF,SAAvB,CAAiC;AAE/BG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAEF,KAAK,CAACE;AADJ,KAAb;AAID;;AAOD,QAAMC,iBAAN,GAA0B;AAExB,UAAMC,IAAI,GAAE,MAAMC,KAAK,CAAC,+CAAD,CAAL,CACbC,IADa,CACPC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADN,CAAlB;AAGA,QAAIC,YAAY,GAAE,EAAlB;AACAL,IAAAA,IAAI,CAACM,OAAL,CAAaC,OAAO,IAAI;AACpB,UAAIC,KAAK,GAACD,OAAO,CAACE,GAAlB;AACA,UAAIC,YAAY,GAAEH,OAAO,CAAC,QAAD,CAAP,CAAkB,SAAlB,EAA6BI,IAA/C;AACAN,MAAAA,YAAY,CAACK,YAAD,CAAZ,GAA2BF,KAA3B;AAEH,KALD;AAMAI,IAAAA,OAAO,CAACC,GAAR,CAAYR,YAAZ;AACA,QAAIS,MAAM,GAAE,EAAZ;;AACA,SAAK,IAAIC,GAAT,IAAgBV,YAAhB,EAA6B;AACzBU,MAAAA,GAAG;AACH,UAAIC,IAAI,GAACC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,IAAkC,CAA3C;AACA,UAAIC,IAAI,GAACH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,IAAkC,CAA3C;AACAL,MAAAA,MAAM,CAACO,IAAP,CAAY,cAAaL,IAAb,GAAmB,GAAnB,GAAwBI,IAAxB,GAA8B,QAA1C;AACH;;AACD,SAAKE,YAAL,CAAkBjB,YAAlB,EAA+BS,MAA/B,EApBwB,CAqBxB;AACD;;AAEDQ,EAAAA,YAAY,CAACjB,YAAD,EAAcS,MAAd,EAAsB;AAChC,SAAKS,QAAL,CAAc;AACZC,MAAAA,SAAS,EAAE;AACTC,QAAAA,MAAM,EAAEC,MAAM,CAACC,IAAP,CAAYtB,YAAZ,CADC;AAETuB,QAAAA,QAAQ,EAAE,CACR;AACEC,UAAAA,KAAK,EAAE,YADT;AAEEC,UAAAA,IAAI,EAAEJ,MAAM,CAACK,MAAP,CAAc1B,YAAd,CAFR;AAGE2B,UAAAA,eAAe,EAAElB;AAHnB,SADQ;AAFD;AADC,KAAd;AAYD;;AAEDmB,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,6BACE,QAAC,GAAD;AACE,QAAA,IAAI,EAAE,KAAKpC,KAAL,CAAW2B,SADnB;AAEE,QAAA,KAAK,EAAE,GAFT;AAGE,QAAA,MAAM,EAAE,GAHV;AAIE,QAAA,OAAO,EAAE;AACPU,UAAAA,MAAM,EAAE;AACNC,YAAAA,OAAO,EAAE,KAAKvC,KAAL,CAAWwC,aADd;AAENC,YAAAA,QAAQ,EAAE,KAAKzC,KAAL,CAAW0C,cAFf;AAINb,YAAAA,MAAM,EAAE;AACNc,cAAAA,SAAS,EAAE,KAAK1C,KAAL,CAAWC,OADhB;AAEN0C,cAAAA,QAAQ,EAAE;AAFJ;AAJF,WADD;AAUPC,UAAAA,MAAM,EAAE;AACNC,YAAAA,KAAK,EAAE,CAAC;AACNP,cAAAA,OAAO,EAAC,IADF;AAENQ,cAAAA,UAAU,EAAE;AACVR,gBAAAA,OAAO,EAAE,IADC;AAEVS,gBAAAA,WAAW,EAAE,aAFH;AAGVL,gBAAAA,SAAS,EAAE,KAAK1C,KAAL,CAAWC;AAHZ,eAFN;AAON+C,cAAAA,KAAK,EAAE;AACLN,gBAAAA,SAAS,EAAE,KAAK1C,KAAL,CAAWC,OADjB;AAEL0C,gBAAAA,QAAQ,EAAE;AAFL;AAPD,aAAD,CADD;AAcNM,YAAAA,KAAK,EAAE,CAAC;AACNX,cAAAA,OAAO,EAAC,IADF;AAENU,cAAAA,KAAK,EAAE;AACLN,gBAAAA,SAAS,EAAE,KAAK1C,KAAL,CAAWC,OADjB;AAEL0C,gBAAAA,QAAQ,EAAE,EAFL;AAGLO,gBAAAA,QAAQ,EAAE;AAHL,eAFD,CAQN;AACA;AACA;AACA;;AAXM,aAAD;AAdD;AAVD;AAJX;AAAA;AAAA;AAAA;AAAA;AADF,qBADF;AAiDD;;AAxG8B;;AAA3BrD,Q,CASGsD,Y,GAAe;AACpBC,EAAAA,YAAY,EAAE,IADM;AAEpBb,EAAAA,aAAa,EAAE,IAFK;AAGpBE,EAAAA,cAAc,EAAE;AAHI,C;AAkGxB,eAAe5C,QAAf","sourcesContent":["import React, { Component } from 'react';\nimport { Bar} from 'react-chartjs-2';\n\nclass BarChart extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      bgColor: props.bgColor\n    }\n\n  }\n  static defaultProps = {\n    displayTitle: true,\n    displayLegend: true,\n    legendPosition: 'right'\n  }\n\n  async componentDidMount() {\n    \n    const resp= await fetch('http://localhost:8080/survey/ducks?by=country')\n        .then((response) => response.json())\n\n    var countCountry= {};\n    resp.forEach(element => { \n        var count=element.sum\n        var country_name =element['Region']['Country'].name\n        countCountry[country_name]=count\n        \n    });\n    console.log(countCountry)\n    var colors =[]\n    for (var key in countCountry){\n        key\n        var pos1=Math.floor(Math.random() * 255) + 1;\n        var pos2=Math.floor(Math.random() * 255) + 1;\n        colors.push('rgba(255,'+ pos1 +','+ pos2 +', 0.6)')\n    }\n    this.getChartData(countCountry,colors);\n    // console.log(resp)\n  }\n\n  getChartData(countCountry,colors) {\n    this.setState({\n      chartData: {\n        labels: Object.keys(countCountry),\n        datasets: [\n          {\n            label: 'Duck Count',\n            data: Object.values(countCountry),\n            backgroundColor: colors\n          }\n        ]\n      }\n    })\n  }\n\n  render() {\n    return (\n      <>\n        <Bar\n          data={this.state.chartData}\n          width={600}\n          height={150}\n          options={{\n            legend: {\n              display: this.props.displayLegend,\n              position: this.props.legendPosition,\n\n              labels: {\n                fontColor: this.state.bgColor,\n                fontSize: 18\n              }\n            },\n            scales: {\n              yAxes: [{\n                display:true,\n                scaleLabel: {\n                  display: true,\n                  labelString: 'probability',\n                  fontColor: this.state.bgColor\n                },\n                ticks: {\n                  fontColor: this.state.bgColor,\n                  fontSize: 20,\n                },\n\n              }],\n              xAxes: [{\n                display:true,\n                ticks: {\n                  fontColor: this.state.bgColor,\n                  fontSize: 20,\n                  stepSize: 1\n\n                },\n                // gridLines: {\n                //   display: false ,\n                //   color: this.state.bgColor\n                // },\n              }]\n            }\n\n          }}\n        />\n      </>\n    );\n  }\n}\n\nexport default BarChart;"]},"metadata":{},"sourceType":"module"}