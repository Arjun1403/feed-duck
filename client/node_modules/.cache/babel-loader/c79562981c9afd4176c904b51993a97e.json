{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/arjun/Dal_Projects/react-project/duck-feeds/src/components/DashBoard/FeedTables.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nconst columns = [{\n  id: 'nickname',\n  label: 'Nick Name',\n  minWidth: 170\n}, {\n  id: 'time',\n  label: 'Time',\n  minWidth: 100\n}, {\n  id: 'timePeriod',\n  label: 'Environment',\n  minWidth: 100,\n  align: 'right'\n}, {\n  id: 'place',\n  label: 'Place',\n  minWidth: 100,\n  align: 'right'\n}, {\n  id: 'country',\n  label: 'Country',\n  minWidth: 100,\n  align: 'right'\n}, {\n  id: 'food',\n  label: 'Food',\n  minWidth: 100,\n  align: 'right'\n}, {\n  id: 'foodType',\n  label: 'FoodType',\n  minWidth: 100,\n  align: 'right'\n}, {\n  id: 'duckCount',\n  label: 'Duck Feed',\n  minWidth: 100,\n  align: 'right'\n}, {\n  id: 'feedAmount',\n  label: 'Feed Amount',\n  minWidth: 100,\n  align: 'right'\n}];\n\nconst styles = theme => ({\n  root: {\n    backgroundColor: theme.palette.secondary.dark\n  },\n  tablePagination: {},\n  tablePaginationCaption: {\n    color: 'white'\n  },\n  tablePaginationSelectIcon: {\n    color: 'white'\n  },\n  tablePaginationSelect: {\n    color: 'white'\n  },\n  tablePaginationActions: {\n    color: 'white'\n  }\n});\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n    alignItems: 'center',\n    alignSelf: 'center',\n    background: \"#f4f4f4\"\n  },\n  tablePaginationSelectIcon: {\n    color: 'white'\n  },\n  container: {\n    maxHeight: 440\n  }\n});\nexport default function StickyHeadTable() {\n  _s();\n\n  const classes = useStyles();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  const [rows, setRows] = React.useState([]);\n  React.useEffect(function getTableRows() {\n    async function getAllRoes() {\n      const tableResponse = await fetch('http://localhost:8080/survey', {\n        method: 'GET',\n        mode: \"cors\",\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(response => response.json());\n\n      if (tableResponse['status'] == 200) {\n        var tbRows = [];\n        const tableValues = tableResponse['data'];\n        tableValues.map(eachRow => {\n          var nickname = eachRow.nickname;\n          var time = eachRow.time;\n          var timePeriod = eachRow.timePeriod;\n          var place = eachRow.place;\n          var country = eachRow.country;\n          var food = eachRow.food;\n          var foodType = eachRow.foodType;\n          var duckCount = eachRow.duckCount;\n          var feedAmount = eachRow.feedAmount;\n          tbRows.push({\n            nickname,\n            time,\n            timePeriod,\n            place,\n            country,\n            food,\n            foodType,\n            duckCount,\n            feedAmount\n          });\n        });\n        setRows(tbRows);\n      }\n    }\n\n    getAllRoes();\n  }, []);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(TableContainer, {\n      className: classes.container,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        stickyHeader: true,\n        \"aria-label\": \"sticky table\",\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: columns.map(column => /*#__PURE__*/_jsxDEV(TableCell, {\n              align: column.align,\n              style: {\n                minWidth: column.minWidth,\n                background: \"#0F293D\",\n                color: '#fff'\n              },\n              children: column.label\n            }, column.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(row => {\n            return /*#__PURE__*/_jsxDEV(TableRow, {\n              hover: true,\n              role: \"checkbox\",\n              tabIndex: -1,\n              children: columns.map(column => {\n                const value = row[column.id];\n                return /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: column.align,\n                  style: {\n                    color: '#0F293D'\n                  },\n                  children: column.format && typeof value === 'number' ? column.format(value) : value\n                }, column.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 180,\n                  columnNumber: 23\n                }, this);\n              })\n            }, row.code, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TablePagination, {\n      rowsPerPageOptions: [10, 25, 100],\n      component: \"div\",\n      style: {\n        background: '#0F293D',\n        color: '#f4f4f4'\n      },\n      count: rows.length,\n      rowsPerPage: rowsPerPage,\n      page: page,\n      onChangePage: handleChangePage,\n      onChangeRowsPerPage: handleChangeRowsPerPage,\n      classes: {\n        root: classes.tablePagination,\n        caption: classes.tablePaginationCaption,\n        selectIcon: classes.tablePaginationSelectIcon,\n        select: classes.tablePaginationSelect,\n        actions: classes.tablePaginationActions\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 5\n  }, this);\n}\n\n_s(StickyHeadTable, \"uQltjn2E6TqsJzpn7acylQlM4Bw=\", false, function () {\n  return [useStyles];\n});\n\n_c = StickyHeadTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"StickyHeadTable\");","map":{"version":3,"sources":["/home/arjun/Dal_Projects/react-project/duck-feeds/src/components/DashBoard/FeedTables.js"],"names":["React","makeStyles","Paper","Table","TableBody","TableCell","TableContainer","TableHead","TablePagination","TableRow","columns","id","label","minWidth","align","styles","theme","root","backgroundColor","palette","secondary","dark","tablePagination","tablePaginationCaption","color","tablePaginationSelectIcon","tablePaginationSelect","tablePaginationActions","useStyles","width","alignItems","alignSelf","background","container","maxHeight","StickyHeadTable","classes","page","setPage","useState","rowsPerPage","setRowsPerPage","rows","setRows","useEffect","getTableRows","getAllRoes","tableResponse","fetch","method","mode","headers","then","response","json","tbRows","tableValues","map","eachRow","nickname","time","timePeriod","place","country","food","foodType","duckCount","feedAmount","push","handleChangePage","event","newPage","handleChangeRowsPerPage","target","value","column","slice","row","format","code","length","caption","selectIcon","select","actions"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\n\nconst columns = [\n  { id: 'nickname', label: 'Nick Name', minWidth: 170 },\n  { id: 'time', label: 'Time', minWidth: 100 },\n  {\n    id: 'timePeriod',\n    label: 'Environment',\n    minWidth: 100,\n    align: 'right',\n    \n  },\n  {\n    id: 'place',\n    label: 'Place',\n    minWidth: 100,\n    align: 'right',\n    \n  },\n  {\n    id: 'country',\n    label: 'Country',\n    minWidth: 100,\n    align: 'right',\n    \n  },\n  {\n    id: 'food',\n    label: 'Food',\n    minWidth: 100,\n    align: 'right',\n    \n  },\n  {\n    id: 'foodType',\n    label: 'FoodType',\n    minWidth: 100,\n    align: 'right',\n    \n  },\n  {\n    id: 'duckCount',\n    label: 'Duck Feed',\n    minWidth: 100,\n    align: 'right',\n    \n  },\n  {\n    id: 'feedAmount',\n    label: 'Feed Amount',\n    minWidth: 100,\n    align: 'right',\n    \n  },\n];\n\n\nconst styles = theme => ({\n    root: {\n        backgroundColor: theme.palette.secondary.dark,\n      },\n    tablePagination: {\n      },\n    tablePaginationCaption: {\n        color: 'white'\n      },\n    tablePaginationSelectIcon: {\n        color: 'white'\n      },\n    tablePaginationSelect: {\n        color: 'white'\n      },\n    tablePaginationActions: {\n        color: 'white',\n      },\n    })\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n    alignItems:'center',\n    alignSelf:'center',\n    \n    background:\"#f4f4f4\",\n  },\n  tablePaginationSelectIcon: {\n    color: 'white'\n  },\n  container: {\n    maxHeight: 440,\n    \n  },\n});\n\nexport default function StickyHeadTable() {\n  const classes = useStyles();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  const [rows,setRows]=React.useState([]);\n\n  React.useEffect( function getTableRows(){\n    async function getAllRoes(){\n        \n        const tableResponse = await fetch('http://localhost:8080/survey', {\n        method: 'GET',\n        mode: \"cors\",\n        headers: {\n            'Content-Type': 'application/json',\n        }\n    }).then(response => response.json());\n    if (tableResponse['status'] == 200) {\n        var tbRows=[];\n        const tableValues = tableResponse['data']\n\n        \n        tableValues.map((eachRow)=>{\n            var nickname=eachRow.nickname;            \n            var time = eachRow.time;\n            var timePeriod = eachRow.timePeriod;\n            var place = eachRow.place;\n            var country = eachRow.country;\n            var food=eachRow.food;\n            var foodType = eachRow.foodType;\n            var duckCount = eachRow.duckCount;\n            var feedAmount = eachRow.feedAmount;\n            tbRows.push({nickname,time,timePeriod,place,country,food,foodType,duckCount,feedAmount});\n            \n        })\n        setRows(tbRows);\n\n    }\n\n    }\n    getAllRoes();\n\n},[]);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  return (\n    <Paper className={classes.root}>\n      <TableContainer className={classes.container}>\n        <Table stickyHeader aria-label=\"sticky table\">\n          <TableHead>\n            <TableRow>\n              {columns.map((column) => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth,background:\"#0F293D\",color:'#fff' }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\n              return (\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code} >\n                  {columns.map((column) => {\n                    const value = row[column.id];\n                    return (\n                      <TableCell key={column.id} align={column.align} style={{color:'#0F293D'}}>\n                        {column.format && typeof value === 'number' ? column.format(value) : value}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        rowsPerPageOptions={[10, 25, 100]}\n        component=\"div\"\n        style={{background:'#0F293D',color:'#f4f4f4'}}\n        count={rows.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onChangePage={handleChangePage}\n        onChangeRowsPerPage={handleChangeRowsPerPage}\n        classes={{\n            root: classes.tablePagination,\n            caption: classes.tablePaginationCaption,\n            selectIcon: classes.tablePaginationSelectIcon,\n            select: classes.tablePaginationSelect,\n            actions: classes.tablePaginationActions,\n          }}\n      />\n    </Paper>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}